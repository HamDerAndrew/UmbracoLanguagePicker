{"version":3,"file":"umbraco-language-picker.js","sources":["../src/umbraco-language-picker.element.ts"],"sourcesContent":["import { LitElement, html, css, customElement, property, state } from \"@umbraco-cms/backoffice/external/lit\";\nimport { UmbPropertyValueChangeEvent} from \"@umbraco-cms/backoffice/property-editor\";\n// Needed for language picker config values 'allowNull' and 'uniqueFilter'\nimport { type UmbPropertyEditorConfigCollection } from \"@umbraco-cms/backoffice/property-editor\";\nimport { UmbPropertyEditorUiElement } from \"@umbraco-cms/backoffice/extension-registry\";\nimport { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\n// @ts-ignore\nimport { UmbWorkspaceContext, UMB_WORKSPACE_CONTEXT } from \"@umbraco-cms/backoffice/workspace\";\nimport { UMB_AUTH_CONTEXT, UmbAuthContext } from \"@umbraco-cms/backoffice/auth\";\nimport { UMB_PROPERTY_CONTEXT } from '@umbraco-cms/backoffice/property';\nimport { UmbLanguageCollectionRepository } from \"@umbraco-cms/backoffice/language\";\nimport { UUISelectEvent } from \"@umbraco-cms/backoffice/external/uui\";\nimport type { UmbMenuStructureWorkspaceContext, UmbStructureItemModel } from '@umbraco-cms/backoffice/menu';\nimport {CSSResult} from \"lit\";\n\n@customElement('umbraco-language-picker')\nexport default class UmbracoLanguagePickerElement extends UmbElementMixin(LitElement) implements UmbPropertyEditorUiElement\n{\n  @property()\n  // @ts-ignore\n  public value: string;\n\n  @property()\n  public displayValue: string | undefined;\n\n  @property()\n  public languageList: object[] = [];\n\n  @property()\n  public contentNodeId: string | undefined;\n\n  @property()\n  public myAuthToken: Promise<string> | undefined;\n\n  @property()\n  public currentAlias: string = \"\";\n\n  @property()\n  public contentParentNode: string = \"\";\n\n  @property()\n  public languageError: boolean = false;\n\n  @property()\n  public mappedLanguageList: Record<string, string> = {};\n\n  @property()\n  private _lowerCaseNone: string = \"\";\n\n  @property({attribute: false})\n  public set config(config: UmbPropertyEditorConfigCollection) {\n    this._allowNull = config.getValueByAlias(\"allowNull\");\n    this._uniqueFilter = config.getValueByAlias(\"uniqueFilter\");\n  }\n\n  @state()\n  private _isEditing: boolean = false;\n\n  @state()\n  private _allowNull?: boolean;\n\n  @state()\n  private _uniqueFilter?: boolean;\n\n  // @ts-ignore\n  private _languageCollectionRepository: UmbLanguageCollectionRepository = new UmbLanguageCollectionRepository(this)\n\n  // @ts-ignore\n  private _authorizationContext: UmbAuthContext;\n\n  #workspaceContext?: any;\n  #structureContext?: UmbMenuStructureWorkspaceContext;\n\n  constructor() {\n    super();\n    this.consumeContext(UMB_WORKSPACE_CONTEXT, (context) => {\n      this.#workspaceContext = context;\n      //grab the node id (guid) from the context\n      // @ts-ignore\n      this.contentNodeId = context.getUnique();\n    });\n    this.consumeContext(UMB_AUTH_CONTEXT, (context) => {\n      this._authorizationContext = context;\n      this.myAuthToken = context.getLatestToken();\n    })\n    // To get the alias of the UmbracoLanguagePicker property editor you need to use this\n    this.consumeContext(UMB_PROPERTY_CONTEXT, (propertyContext) => {\n      this.observe(propertyContext.alias, async (propertyAlias) => {\n        // @ts-ignore\n        this.currentAlias = propertyAlias\n      })\n    })\n    this.consumeContext('UmbMenuStructureWorkspaceContext', (instance: any) => {\n      this.#structureContext = instance as UmbMenuStructureWorkspaceContext;\n      this.#observeStructure();\n    });\n  }\n\n  #observeStructure() {\n    if (!this.#structureContext || !this.#workspaceContext) return;\n    const isNew = this.#workspaceContext.getIsNew();\n\n    this.observe(\n        this.#structureContext.structure,\n        (value) => {\n          // TODO: get the type from the context\n          const structure = value as Array<UmbStructureItemModel>;\n          if(isNew)\n          {\n            this._isEditing = true\n            if(this.isDocumentRoot())\n            {\n              // @ts-ignore\n              this.contentParentNode = null;\n            }\n            else\n            {\n              // @ts-ignore\n              this.contentParentNode = structure[structure.length - 1]?.unique;\n            }\n          }\n          else\n          {\n            // @ts-ignore\n            this.contentParentNode = structure[structure.length - 2]?.unique;\n          }\n        },\n        'menuStructureObserver',\n    );\n  }\n\n  private isDocumentRoot() : boolean {\n    return location.href.split(\"/\").indexOf('document-root') > -1;\n  }\n\n  async firstUpdated(changed: any): Promise<void> {\n    super.firstUpdated(changed)\n    await this.getBackofficeLanguages()\n    await this.getLanguages()\n  }\n\n  private async getBackofficeLanguages(): Promise<void> {\n    const {data} = await this._languageCollectionRepository.requestCollection({})\n    if(this._allowNull) {\n      this.mappedLanguageList[this._lowerCaseNone] = \"NONE\";\n    }\n    data?.items.forEach(element => {\n      this.mappedLanguageList[element.unique.toLowerCase()] = element.name\n    })\n    this.displayValue = this.mappedLanguageList[this.value || \"\"];\n  }\n\n  private async getLanguages(): Promise<void> {\n    try {\n      const promiseToken: string | undefined = await this.myAuthToken;\n      const headers = {\n        Authorization: `Bearer ${promiseToken}`\n      };\n      const baseEndpoint = \"/umbraco/management/api/v1/get-key-value-list\"\n      const data = await fetch(`${baseEndpoint}?parentNodeIdOrGuid=${this.contentParentNode}&nodeIdOrGuid=${this.contentNodeId}&propertyAlias=${this.currentAlias}&uniqueFilter=${!!this._uniqueFilter}&allowNull=${!!this._allowNull}`, {headers});\n      const dataJson = await data.json()\n      // Need to map it so the uui element can accept and display the data: https://uui.umbraco.com/?path=/docs/uui-select--docs\n      const mappedData = dataJson.map((language:any) => {\n        if(this._allowNull) {\n          console.log(\"I am allowing null\")\n          return { name: this.mappedLanguageList[language.key] || \"NONE\", value: language.key || this._lowerCaseNone, selected: language.key === this.value}\n        } else {\n          return { name: this.mappedLanguageList[language.key], value: language.key, selected: language.key === this.value}\n        }\n      })\n      const mappedValue = mappedData.find((element: any) => element.value === this.value)\n      this.languageList = mappedData;\n      if(mappedValue) {\n        this.displayValue = this.mappedLanguageList[mappedValue.value];\n      }\n      this.languageError = false;\n    } catch (error) {\n      this.languageError = true;\n      console.error(error)\n    }\n  }\n\n  private handleSelectChange(e: UUISelectEvent): void {\n    const langValue = e.target.value as string;\n    this.value = langValue;\n\n    this.dispatchEvent(new UmbPropertyValueChangeEvent());\n  }\n\n  private renderDropdown() {\n    return html`\n      <uui-select\n          .value=${this.value}\n          label=\"Select Language\"\n          .options=${this.languageList}\n          .placeholder=${this.displayValue}\n          @change=${this.handleSelectChange}\n      ></uui-select>\n    `\n  }\n\n  private renderDisplayValue() {\n    return html`\n      <span class=\"editing-text\">\n      ${this.displayValue ? this.displayValue : this.value}\n    </span>\n      <uui-button\n          look=\"secondary\"\n          color=\"default\"\n          class=\"data-api-picker-edit-label\"\n          role=\"button\"\n          @click=${() => (this._isEditing = !this._isEditing)}>\n        <umb-localize key=\"umbracoLanguagePicker_edit\">Edit</umb-localize>\n      </uui-button>\n    `;\n  }\n\n\n  render() {\n    return html`\n      ${this._isEditing\n          ? this.renderDropdown()\n          : this.renderDisplayValue()}\n      ${this.languageError ? html`<p class=\"error-text\">Error fetching languages</p>` : \"\"}\n    `;\n  }\n\n  static styles: CSSResult[] = [\n    css`\n      .data-api-picker-edit-label {\n        font-size: 13px;\n      }\n      .data-api-picker-edit-label:hover {\n        color: #515054;\n      }\n\n      .editing-text {\n        padding-right: 12px;\n      }\n\n      .error-text {\n        color: var(--uui-color-danger);\n      }\n    `\n  ];\n\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'umbraco-language-picker': UmbracoLanguagePickerElement;\n  }\n}"],"names":["_workspaceContext","_structureContext","_observeStructure","observeStructure_fn","UmbracoLanguagePickerElement","UmbElementMixin","LitElement","__privateAdd","UmbLanguageCollectionRepository","UMB_WORKSPACE_CONTEXT","context","__privateSet","UMB_AUTH_CONTEXT","UMB_PROPERTY_CONTEXT","propertyContext","propertyAlias","instance","__privateMethod","config","changed","data","element","headers","mappedData","language","mappedValue","error","langValue","UmbPropertyValueChangeEvent","html","__privateGet","isNew","value","structure","_a","_b","css","__decorateClass","property","state","customElement"],"mappings":"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"}