{"version":3,"file":"umbraco-language-picker.js","sources":["../src/umbraco-language-picker.element.ts"],"sourcesContent":["import { LitElement, html, css, customElement, property, state } from \"@umbraco-cms/backoffice/external/lit\";\nimport { UmbPropertyValueChangeEvent} from \"@umbraco-cms/backoffice/property-editor\";\n// Needed for language picker config values 'allowNull' and 'uniqueFilter'\nimport { type UmbPropertyEditorConfigCollection } from \"@umbraco-cms/backoffice/property-editor\";\nimport { UmbPropertyEditorUiElement } from \"@umbraco-cms/backoffice/extension-registry\";\nimport { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\n// @ts-ignore\nimport { UmbWorkspaceContext, UMB_WORKSPACE_CONTEXT } from \"@umbraco-cms/backoffice/workspace\";\nimport { UMB_AUTH_CONTEXT, UmbAuthContext } from \"@umbraco-cms/backoffice/auth\";\nimport { UMB_PROPERTY_CONTEXT } from '@umbraco-cms/backoffice/property';\nimport { UmbLanguageCollectionRepository } from \"@umbraco-cms/backoffice/language\";\nimport { UUISelectEvent } from \"@umbraco-cms/backoffice/external/uui\";\n\n@customElement('umbraco-language-picker')\nexport default class UmbracoLanguagePickerElement extends UmbElementMixin(LitElement) implements UmbPropertyEditorUiElement\n{\n  @property()\n  // @ts-ignore\n  public value: string;\n  \n  @property()\n  public displayValue: string | undefined;\n  \n  @property()\n  public languageList: object[] = []\n  \n  @property()\n  public contentNodeId: string | undefined;\n  \n  @property()\n  public myAuthToken: Promise<string> | undefined;\n  \n  @property()\n  public currentAlias = \"\"\n  \n  @property()\n  public contentParentNode = \"\"\n  \n  @property()\n  public languageError: boolean = false;\n  \n  @property()\n  public mappedLanguageList: any = {}\n  \n  @property()\n  private _lowerCaseNone: string = \"\";\n  \n  @property({attribute: false})\n  public set config(config: UmbPropertyEditorConfigCollection) {\n    this._allowNull = config.getValueByAlias(\"allowNull\");\n    this._uniqueFilter = config.getValueByAlias(\"uniqueFilter\");\n  }\n  \n  @state()\n  isEditing: boolean = false;\n  \n  @state()\n  private _allowNull?: boolean;\n  \n  @state()\n  private _uniqueFilter?: boolean\n  \n  @state()\n  // @ts-ignore\n  private _selectedLanguage?: string;\n  // @ts-ignore\n  private languageCollectionRepository = new UmbLanguageCollectionRepository(this)\n  // @ts-ignore\n  private workspaceContext: UmbWorkspaceContext;\n  // @ts-ignore\n  private authorizationContext: UmbAuthContext;\n  // @ts-ignore\n  private myToken: Promise<string>;\n  constructor() {\n    super();\n    this.consumeContext(UMB_WORKSPACE_CONTEXT, (context) => {\n      this.workspaceContext = context;\n      //grab the node id (guid) from the context\n      this.contentNodeId = context.getUnique();\n      // context.getEntityType()\n    });\n    this.consumeContext(UMB_AUTH_CONTEXT, (context) => {\n      this.authorizationContext = context;\n      this.myAuthToken = context.getLatestToken();\n    })\n    // To get the alias of the UmbracoLanguagePicker property editor you need to use this\n    this.consumeContext(UMB_PROPERTY_CONTEXT, (propertyContext) => {\n      this.observe(propertyContext.alias, async (propertyAlias) => {\n        // @ts-ignore\n        this.currentAlias = propertyAlias\n      })\n    })\n    this.consumeContext('UmbMenuStructureWorkspaceContext', (instance: any) => {\n      console.log(\"instance: \", instance)\n      const getParentArray = instance.structure.source._value;\n      // If you select a content node at the root level, the getParentArray will contain two objects.\n      // The first object has a null value. The second object has the root content node id.\n      // Therefore we have this \"hack\" in place to check if the array length is not 2.\n      // If the array length is greater than 2, we know that we are not at the root content level\n      if(getParentArray.length !== 2) {\n        const selectParent = getParentArray.length - 2;\n        const x = getParentArray[selectParent];\n        this.contentParentNode = x ? x.unique: null;\n        console.log(parent)\n      } else {\n        // If the getParentArray length is not 2, that means the root content node id is at index [1]\n        const rootParentNode = getParentArray[0].unique\n        this.contentParentNode = rootParentNode\n      }\n      console.log(this.contentParentNode)\n\n      this.observe(instance.structure, (value) => {\n        console.log(value)\n        // this.contentParentNode = value;\n      });\n\n    });\n  }\n  \n  async firstUpdated(changed: any) {\n    super.firstUpdated(changed)\n    console.log(this.value)\n    const {data} = await this.languageCollectionRepository.requestCollection({})\n    this.mappedLanguageList[this._lowerCaseNone] = \"NONE\";\n    data.items.forEach(element => {\n      this.mappedLanguageList[element.unique.toLowerCase()] = element.name\n    })\n    console.log(this.mappedLanguageList)\n    this.displayValue = this.mappedLanguageList[this.value || \"\"];\n    console.log(this.displayValue)\n    this.getLanguages()\n    // const { data } = await this.languageCollectionRepository.requestCollection({})\n    // if (data) {\n    //   this.languageList = data.items.map((language:any) => {\n    //     return { name: language.name, value: language.unique, selected: language.unique === this.value}\n    //   })\n    // }\n  }\n\n  private assignToNumber(config: boolean | undefined): number {\n    // Due to the backend using 1 and 0 to determine true or false for the settings, we return the number based on the boolean\n    return config ? 1 : 0;\n  }\n\n  private async getLanguages() {\n    try {\n      const promiseToken = await this.myAuthToken;\n      const headers = {\n        Authorization: `Bearer ${promiseToken}`\n      };\n      const baseEndpoint = \"/umbraco/management/api/v1/get-key-value-list\"\n      const data = await fetch(`${baseEndpoint}?parentNodeIdOrGuid=${this.contentParentNode}&nodeIdOrGuid=${this.contentNodeId}&propertyAlias=${this.currentAlias}&uniqueFilter=${this.assignToNumber(this._uniqueFilter)}&allowNull=${this.assignToNumber(this._allowNull)}`, {headers});\n      const dataJson = await data.json()\n        // Need to map it so the uui element can accept and display the data: https://uui.umbraco.com/?path=/docs/uui-select--docs\n      const mappedData = dataJson.map((language:any) => {\n        return { name: this.mappedLanguageList[language.key] || \"NONE\", value: language.key || this._lowerCaseNone, selected: language.key === this.value}\n      })\n      const mappedValue = mappedData.find((element:any) => element.value === this.value)\n      this.languageList = mappedData;\n      console.log(this.languageList)\n      if(mappedValue) {\n        this.displayValue = this.mappedLanguageList[mappedValue.value];\n      }\n      this.languageError = false;\n    } catch (error) {\n      this.languageError = true;\n      console.log(`An error occured: \\n${error}`, )\n    }\n  }\n  \n  private handleSelectChange(e: UUISelectEvent) {\n    const langValue = e.target.value as string;\n    this.value = langValue;\n    this._selectedLanguage = langValue\n    console.log(langValue)\n    \n    this.dispatchEvent(new UmbPropertyValueChangeEvent());\n  }\n\n  render() {\n    return html`\n      ${this.isEditing ? \n          html`<uui-select .value=${this.value} label=\"select language\" .options=${this.languageList} placeholder=${this._allowNull ? \"NONE\" : \"Select an option\"} @change=${this.handleSelectChange}></uui-select>`\n          :\n          html`<span class=\"editing-text\">${this.displayValue ? this.displayValue : \"Select language\"}</span>\n          <uui-button look=\"secondary\" color=\"default\" class=\"data-api-picker-edit-label\" role=\"button\" @click=${() => this.isEditing = !this.isEditing}>Edit</uui-button>`}\n        ${this.languageError ?  html`<p>error when fetching languages</p>` : \"\" }\n    `;\n  }\n\n  static styles = [\n    css`\n      .data-api-picker-edit-label {\n        font-size: 13px;\n      }\n      .data-api-picker-edit-label:hover {\n        color: #515054;\n      }\n      \n      .editing-text {\n        padding-right: 12px;\n      }\n    `\n  ];\n  \n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'umbraco-language-picker': UmbracoLanguagePickerElement;\n  }\n}"],"names":["UmbracoLanguagePickerElement","UmbElementMixin","LitElement","UmbLanguageCollectionRepository","UMB_WORKSPACE_CONTEXT","context","UMB_AUTH_CONTEXT","UMB_PROPERTY_CONTEXT","propertyContext","propertyAlias","instance","getParentArray","selectParent","x","rootParentNode","value","config","changed","data","element","headers","mappedData","language","mappedValue","error","langValue","UmbPropertyValueChangeEvent","html","css","__decorateClass","property","state","customElement"],"mappings":"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"}