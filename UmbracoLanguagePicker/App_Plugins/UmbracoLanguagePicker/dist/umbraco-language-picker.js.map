{"version":3,"file":"umbraco-language-picker.js","sources":["../src/umbraco-language-picker.element.ts"],"sourcesContent":["import { LitElement, html, css, customElement, property, state } from \"@umbraco-cms/backoffice/external/lit\";\nimport { UmbPropertyValueChangeEvent} from \"@umbraco-cms/backoffice/property-editor\";\n// Needed for language picker config values 'allowNull' and 'uniqueFilter'\nimport { type UmbPropertyEditorConfigCollection } from \"@umbraco-cms/backoffice/property-editor\";\nimport { UmbPropertyEditorUiElement } from \"@umbraco-cms/backoffice/extension-registry\";\nimport { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\n// @ts-ignore\nimport { UmbWorkspaceContext, UMB_WORKSPACE_CONTEXT } from \"@umbraco-cms/backoffice/workspace\";\nimport { UMB_AUTH_CONTEXT, UmbAuthContext } from \"@umbraco-cms/backoffice/auth\";\nimport { UMB_PROPERTY_CONTEXT } from '@umbraco-cms/backoffice/property';\nimport { UmbLanguageCollectionRepository } from \"@umbraco-cms/backoffice/language\";\nimport { UUISelectEvent } from \"@umbraco-cms/backoffice/external/uui\";\nimport type { UmbMenuStructureWorkspaceContext, UmbStructureItemModel } from '@umbraco-cms/backoffice/menu';\n\n@customElement('umbraco-language-picker')\nexport default class UmbracoLanguagePickerElement extends UmbElementMixin(LitElement) implements UmbPropertyEditorUiElement\n{\n  @property()\n  // @ts-ignore\n  public value: string;\n  \n  @property()\n  public displayValue: string | undefined;\n  \n  @property()\n  public languageList: object[] = []\n  \n  @property()\n  public contentNodeId: string | undefined;\n  \n  @property()\n  public myAuthToken: Promise<string> | undefined;\n  \n  @property()\n  public currentAlias = \"\"\n  \n  @property()\n  public contentParentNode = \"\"\n  \n  @property()\n  public languageError: boolean = false;\n  \n  @property()\n  public mappedLanguageList: any = {}\n  \n  @property()\n  private _lowerCaseNone: string = \"\";\n  \n  @property({attribute: false})\n  public set config(config: UmbPropertyEditorConfigCollection) {\n    this._allowNull = config.getValueByAlias(\"allowNull\");\n    this._uniqueFilter = config.getValueByAlias(\"uniqueFilter\");\n  }\n  \n  @state()\n  isEditing: boolean = false;\n  \n  @state()\n  private _allowNull?: boolean;\n  \n  @state()\n  private _uniqueFilter?: boolean\n  \n  @state()\n  // @ts-ignore\n  private _selectedLanguage?: string;\n  // @ts-ignore\n  private languageCollectionRepository = new UmbLanguageCollectionRepository(this)\n\n  // @ts-ignore\n  private authorizationContext: UmbAuthContext;\n  // @ts-ignore\n  private myToken: Promise<string>;\n\n  #workspaceContext?: any;\n  #structureContext?: UmbMenuStructureWorkspaceContext;\n\n  constructor() {\n    super();\n    this.consumeContext(UMB_WORKSPACE_CONTEXT, (context) => {\n      this.#workspaceContext = context;\n        //grab the node id (guid) from the context\n        // @ts-ignore\n      this.contentNodeId = context.getUnique();\n      // context.getEntityType()\n    });\n    this.consumeContext(UMB_AUTH_CONTEXT, (context) => {\n      this.authorizationContext = context;\n      this.myAuthToken = context.getLatestToken();\n    })\n    // To get the alias of the UmbracoLanguagePicker property editor you need to use this\n    this.consumeContext(UMB_PROPERTY_CONTEXT, (propertyContext) => {\n      this.observe(propertyContext.alias, async (propertyAlias) => {\n        // @ts-ignore\n        this.currentAlias = propertyAlias\n      })\n    })\n    this.consumeContext('UmbMenuStructureWorkspaceContext', (instance: any) => {\n      this.#structureContext = instance as UmbMenuStructureWorkspaceContext;\n\t\t\tthis.#observeStructure();\n    });\n  }\n  \n  #observeStructure() {\n\t\tif (!this.#structureContext || !this.#workspaceContext) return;\n\t\tconst isNew = this.#workspaceContext.getIsNew();\n\n\t\tthis.observe(\n\t\t\tthis.#structureContext.structure,\n\t\t\t(value) => {\n\t\t\t\t// TODO: get the type from the context\n\t\t\t\tconst structure = value as Array<UmbStructureItemModel>;\n        if(isNew)\n        {\n          if(this.isDocumentRoot())\n          {\n            // @ts-ignore\n            this.contentParentNode = null;\n          }\n          else\n          {\n            // @ts-ignore\n            this.contentParentNode = structure[structure.length - 1]?.unique;    \n          }\n        }\n        else\n        {\n          // @ts-ignore\n          this.contentParentNode = structure[structure.length - 2]?.unique;  \n        }\n\t\t\t},\n\t\t\t'menuStructureObserver',\n\t\t);\n\t}\n\n  isDocumentRoot() : boolean {\n    return location.href.split(\"/\").indexOf('document-root') > -1;\n  }\n  \n  async firstUpdated(changed: any) {\n    super.firstUpdated(changed)\n    const {data} = await this.languageCollectionRepository.requestCollection({})\n    this.mappedLanguageList[this._lowerCaseNone] = \"NONE\";\n    data?.items.forEach(element => {\n      this.mappedLanguageList[element.unique.toLowerCase()] = element.name\n    })\n    this.displayValue = this.mappedLanguageList[this.value || \"\"];\n    this.getLanguages()\n  }\n\n\n  private async getLanguages() {\n    try {\n      const promiseToken = await this.myAuthToken;\n      const headers = {\n        Authorization: `Bearer ${promiseToken}`\n      };\n      const baseEndpoint = \"/umbraco/management/api/v1/get-key-value-list\"\n      const data = await fetch(`${baseEndpoint}?parentNodeIdOrGuid=${this.contentParentNode}&nodeIdOrGuid=${this.contentNodeId}&propertyAlias=${this.currentAlias}&uniqueFilter=${!!this._uniqueFilter}&allowNull=${!!this._allowNull}`, {headers});\n      const dataJson = await data.json()\n        // Need to map it so the uui element can accept and display the data: https://uui.umbraco.com/?path=/docs/uui-select--docs\n      const mappedData = dataJson.map((language:any) => {\n        return { name: this.mappedLanguageList[language.key] || \"NONE\", value: language.key || this._lowerCaseNone, selected: language.key === this.value}\n      })\n      const mappedValue = mappedData.find((element:any) => element.value === this.value)\n      this.languageList = mappedData;\n      if(mappedValue) {\n        this.displayValue = this.mappedLanguageList[mappedValue.value];\n      }\n      this.languageError = false;\n    } catch (error) {\n      this.languageError = true;\n      console.error(error)\n    }\n  }\n  \n  private handleSelectChange(e: UUISelectEvent) {\n    const langValue = e.target.value as string;\n    this.value = langValue;\n    this._selectedLanguage = langValue\n    \n    this.dispatchEvent(new UmbPropertyValueChangeEvent());\n  }\n\n  render() {\n    return html`\n      ${this.isEditing ? \n          html`<uui-select .value=${this.value} label=\"select language\" .options=${this.languageList} placeholder=${this._allowNull ? \"NONE\" : \"Select an option\"} @change=${this.handleSelectChange}></uui-select>`\n          :\n          html`<span class=\"editing-text\">${this.displayValue ? this.displayValue : \"Select language\"}</span>\n          <uui-button look=\"secondary\" color=\"default\" class=\"data-api-picker-edit-label\" role=\"button\" @click=${() => this.isEditing = !this.isEditing}>\n            <umb-localize key=\"umbracoLanguagePicker_edit\">\n              Edit\n            </umb-localize>\n          </uui-button>`}\n        ${this.languageError ?  html`<p>error when fetching languages</p>` : \"\" }\n    `;\n  }\n\n  static styles = [\n    css`\n      .data-api-picker-edit-label {\n        font-size: 13px;\n      }\n      .data-api-picker-edit-label:hover {\n        color: #515054;\n      }\n      \n      .editing-text {\n        padding-right: 12px;\n      }\n    `\n  ];\n  \n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'umbraco-language-picker': UmbracoLanguagePickerElement;\n  }\n}\n"],"names":["_workspaceContext","_structureContext","_observeStructure","observeStructure_fn","UmbracoLanguagePickerElement","UmbElementMixin","LitElement","__privateAdd","UmbLanguageCollectionRepository","UMB_WORKSPACE_CONTEXT","context","__privateSet","UMB_AUTH_CONTEXT","UMB_PROPERTY_CONTEXT","propertyContext","propertyAlias","instance","__privateMethod","config","changed","data","element","headers","mappedData","language","mappedValue","error","langValue","UmbPropertyValueChangeEvent","html","__privateGet","isNew","value","structure","_a","_b","css","__decorateClass","property","state","customElement"],"mappings":"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"}